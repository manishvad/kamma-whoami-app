name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    -  name: Checkout
       uses: actions/checkout@v3

    - name: Set version number
      run: |
        echo "VERSION_NUMBER=$((GITHUB_RUN_NUMBER))" >> $GITHUB_ENV
        cat $GITHUB_ENV
 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2 
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/github-actions-role
        role-session-name: samplerolesession
        aws-region: eu-west-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - uses: actions/setup-go@v4
      with:
          go-version: '1.20'
          cache: false
      
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag "kamma/whoami:${{ env.VERSION_NUMBER }}"
    
    - name: Scan for vulnerabilities
      id: scan
      uses: crazy-max/ghaction-container-scan@v2
      with:
        image: "kamma/whoami:${{ env.VERSION_NUMBER }}"
        dockerfile: ./Dockerfile
        severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

    - name: JSON result
      run: cat ${{ steps.scan.outputs.json }} 

    # when tests runs successfully will build final image and push to ECR 
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: kamma-ecr-repo
        IMAGE_TAG: "kamma-whoami-${{ env.VERSION_NUMBER }}"
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Build & Deploy k8s manifest files
      env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ec2-user
      
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

            # Now we have got the access of EC2 and we will start the deploy .
            cd /home/ec2-user
            ls -l 

